#using "Gozintograph.gm"

function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}

procedure generateBaseNodes(var nodeAmount: int) {
    for(i:int in [1:nodeAmount]) {
        (def b:BaseNode) = add(BaseNode);
        b.id = i; b.Value = randomIntInRange(1,10);
    }
    return();
}

rule initNodes {
    replace {
    ---
        eval { 
            def var nodeNumber:int = randomIntInRange(1,10);
            generateBaseNodes(nodeNumber);
        }
    }
}

rule insertEdges {
    x:BaseNode;
	negative {
		x -rn:ForwardEdge-> xn:BaseNode;
	}

	modify {
		x -r:ForwardEdge-> s:BaseNode;
	}
}