#using "Gozintograph.gm"

function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}

procedure generateProducts(var nodeAmount: int) {
    for(i:int in [1:nodeAmount]) {
        (def p:Product) = add(Product);
        p.id = i; p.Value = randomIntInRange(1,10);
    }
    return();
}

procedure generateIntermediateProduct(var nodeAmount: int) {
    for(i:int in [1:nodeAmount]) {
        (def p:IntermediateProduct) = add(IntermediateProduct);
        p.id = i; p.Value = randomIntInRange(1,10);
    }
    return();
}

procedure generateBuyingPart(var nodeAmount: int) {
    for(i:int in [1:nodeAmount]) {
        (def p:BuyingPart) = add(BuyingPart);
        p.id = i; p.Value = randomIntInRange(1,10);
    }
    return();
}

procedure generateResource(var nodeAmount: int) {
    for(i:int in [1:nodeAmount]) {
        (def p:Resource) = add(Resource);
        p.id = i; p.Value = randomIntInRange(1,10);
    }
    return();
}

rule initNodes {
    S:StartNode;

    replace {
    ---
        eval { 
            def var productNumber:int = randomIntInRange(1,10);
            def var intermediateProductNumber:int = randomIntInRange(1,10);
            def var buyingPartNumber:int = randomIntInRange(1,10);
            def var resourceNumber:int = randomIntInRange(1,10);
            generateProducts(productNumber);
            generateIntermediateProduct(intermediateProductNumber);
            generateBuyingPartNumber(buyingPartNumber);
            generateResource(resourceNumber);
        }
    }
}

rule insertEdges {
    x:IntermediateProduct;
    y:Product
    negative {
        x -e:ForwardEdge-> y;
    }

    modify {
        x -ForwardEdge> <;
    }
}