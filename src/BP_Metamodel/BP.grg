#using "BP.gm"

rule initGraph {
    modify {

    ---
        eval {    
            def ref weightedPatterns:map<string, double> = map<string, double>{
                "AND"->0.3,
                "OR"->0.3,
                "XOR"->0.2,
                "LOOP"->0.2
            };
            def var patternType:string = pickReplacementPattern(weightedPatterns);

            (def p:Pattern) = add(Pattern);
            p.type = patternType;
            p.depth = 1;
            p.width = 1;
            p.probability = 1.0;
        }
    }
}

rule addPattern {
    x:Pattern;
    negative {
        x -e:PatternConnector-> y:Pattern;
    }
---
    def var prob:double;
    yield {
        yield prob = x.probability;
    }

    modify {
    ---
        eval {
            def var edgeAmount:int = randomIntInRange(2,4);
            generatePattern(edgeAmount, x);
        }
    }
} \ orderDescendingBy<prob>

procedure generatePattern(var edgeAmount:int, x:Pattern) {
    for(i:int in [1:edgeAmount]) {
        def ref weightedPatterns:map<string, double> = map<string, double>{
            "AND"->0.3,
            "OR"->0.3,
            "XOR"->0.2,
            "LOOP"->0.2,
            ""
        };
        def var replacementPattern:string = pickReplacementPattern(weightedPatterns);

        (def p:Pattern) = add(Pattern);
        p.type = replacementPattern;
        p.depth = x.depth + 1;
        p.width = x.width + edgeAmount;
        p.probability = (p.depth * 4) / p.width;

        add(PatternConnector, x, p);
    }
    return();
}

function pickReplacementPattern(ref weightedPatterns:map<string, double>): string {
    def ref weightRangePatterns:map<double, string> = weightMapToRangeMap(weightedPatterns);
    def var replacementPattern:string = sampleFromRangeMap(weightRangePatterns);
    return (replacementPattern);
}




function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}
function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function weightMapToRangeMap(ref weightMap:map<string, double>): map<double, string> {
    def ref rangeMap:map<double, string> = map<double, string>{};
    def var sum:double = 0.0;
    for(k:string -> v:double in weightMap) {
        sum = sum + v;
        rangeMap.add(sum, k);
    }
    return(rangeMap);
}

function sampleFromRangeMap(ref rangeMap:map<double,string>): string {
    def var randomValue:double = random();
    def var sampledValue:string;
    def var lowerBound:double = 0.0;

    for(upperBound:double -> v:string in rangeMap) {
        if (randomValue >= lowerBound && randomValue <= upperBound) {
            sampledValue = v;
            break;
        }
    }
    return(sampledValue);
}