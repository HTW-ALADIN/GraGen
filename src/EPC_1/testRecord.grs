# begin of graph "EPC" saved by GrsExport

new graph "EPC" "EPC"
# total number of nodes: 0

# total number of edges: 0

# total number of internal class objects: 0

# end of graph "EPC" saved by GrsExport

# match of initGraph selected
# rewriting selected match
new :Event($="$0")
new :Event($="$1")
new @("$0") -:ForwardEdge($="$2")-> @("$1")
# match of insertGatePattern selected
# rewriting selected match
new :XorGate($="$3")
new :XorGate($="$4")
@("$3").Type = "open"
@("$4").Type = "close"
new @("$0") -:ForwardEdge($="$5")-> @("$3")
new @("$4") -:ForwardEdge($="$6")-> @("$1")
new @("$3") -:ForwardEdge($="$7")-> @("$4")
new @("$3") -:ForwardEdge($="$8")-> @("$4")
new @("$3") -:ForwardEdge($="$9")-> @("$4")
new @("$3") -:ForwardEdge($="$A")-> @("$4")
delete edge @("$2")
# match of insertGatePattern selected
# rewriting selected match
new :OrGate($="$B")
new :OrGate($="$C")
@("$B").Type = "open"
@("$C").Type = "close"
new @("$4") -:ForwardEdge($="$D")-> @("$B")
new @("$C") -:ForwardEdge($="$E")-> @("$1")
new @("$B") -:ForwardEdge($="$F")-> @("$C")
new @("$B") -:ForwardEdge($="$10")-> @("$C")
new @("$B") -:ForwardEdge($="$11")-> @("$C")
delete edge @("$6")
# match of insertGatePattern selected
# rewriting selected match
new :OrGate($="$12")
new :XorGate($="$13")
@("$12").Type = "open"
@("$13").Type = "close"
new @("$3") -:ForwardEdge($="$14")-> @("$12")
new @("$12") -:ForwardEdge($="$15")-> @("$13")
new @("$13") -:BackwardEdge($="$16")-> @("$12")
new @("$13") -:ForwardEdge($="$17")-> @("$4")
delete edge @("$A")
# match of insertGatePattern selected
# rewriting selected match
new :AndGate($="$18")
new :AndGate($="$19")
@("$18").Type = "open"
@("$19").Type = "close"
new @("$0") -:ForwardEdge($="$1A")-> @("$18")
new @("$19") -:ForwardEdge($="$1B")-> @("$3")
new @("$18") -:ForwardEdge($="$1C")-> @("$19")
new @("$18") -:ForwardEdge($="$1D")-> @("$19")
delete edge @("$5")
# match of insertGatePattern selected
# rewriting selected match
new :OrGate($="$1E")
new :OrGate($="$1F")
@("$1E").Type = "open"
@("$1F").Type = "close"
new @("$3") -:ForwardEdge($="$20")-> @("$1E")
new @("$1F") -:ForwardEdge($="$21")-> @("$4")
new @("$1E") -:ForwardEdge($="$22")-> @("$1F")
new @("$1E") -:ForwardEdge($="$23")-> @("$1F")
new @("$1E") -:ForwardEdge($="$24")-> @("$1F")
new @("$1E") -:ForwardEdge($="$25")-> @("$1F")
delete edge @("$8")
# match of insertGatePattern selected
# rewriting selected match
new :AndGate($="$26")
new :AndGate($="$27")
@("$26").Type = "open"
@("$27").Type = "close"
new @("$3") -:ForwardEdge($="$28")-> @("$26")
new @("$27") -:ForwardEdge($="$29")-> @("$4")
new @("$26") -:ForwardEdge($="$2A")-> @("$27")
new @("$26") -:ForwardEdge($="$2B")-> @("$27")
delete edge @("$7")
# match of insertGatePattern selected
# rewriting selected match
new :AndGate($="$2C")
new :AndGate($="$2D")
@("$2C").Type = "open"
@("$2D").Type = "close"
new @("$0") -:ForwardEdge($="$2E")-> @("$2C")
new @("$2D") -:ForwardEdge($="$2F")-> @("$18")
new @("$2C") -:ForwardEdge($="$30")-> @("$2D")
new @("$2C") -:ForwardEdge($="$31")-> @("$2D")
new @("$2C") -:ForwardEdge($="$32")-> @("$2D")
delete edge @("$1A")
# match of insertGatePattern selected
# rewriting selected match
new :OrGate($="$33")
new :OrGate($="$34")
@("$33").Type = "open"
@("$34").Type = "close"
new @("$1F") -:ForwardEdge($="$35")-> @("$33")
new @("$34") -:ForwardEdge($="$36")-> @("$4")
new @("$33") -:ForwardEdge($="$37")-> @("$34")
new @("$33") -:ForwardEdge($="$38")-> @("$34")
delete edge @("$21")
# match of insertGatePattern selected
# rewriting selected match
new :AndGate($="$39")
new :AndGate($="$3A")
@("$39").Type = "open"
@("$3A").Type = "close"
new @("$1E") -:ForwardEdge($="$3B")-> @("$39")
new @("$3A") -:ForwardEdge($="$3C")-> @("$1F")
new @("$39") -:ForwardEdge($="$3D")-> @("$3A")
new @("$39") -:ForwardEdge($="$3E")-> @("$3A")
new @("$39") -:ForwardEdge($="$3F")-> @("$3A")
new @("$39") -:ForwardEdge($="$40")-> @("$3A")
delete edge @("$23")
# match of insertGatePatter