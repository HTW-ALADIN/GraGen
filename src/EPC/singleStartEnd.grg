#using "EPC.gm"

rule initGraph {
    modify {
        x:Event;
        y:Event;
        x -e:ForwardEdge-> y;
    }
}

function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}

function weightMapToRangeMap(ref weightMap:map<string, double>): map<double, string> {
    def ref rangeMap:map<double, string> = map<double, string>{};
    def var sum:double = 0.0;
    for(k:string -> v:double in weightMap) {
        sum = sum + v;
        rangeMap.add(sum, k);
    }
    return(rangeMap);
}

function sampleFromRangeMap(ref rangeMap:map<double,string>): string {
    def var randomValue:double = random();
    def var sampledValue:string;
    def var lowerBound:double = 0.0;

    for(upperBound:double -> v:string in rangeMap) {
        if (randomValue >= lowerBound && randomValue <= upperBound) {
            sampledValue = v;
            break;
        }
    }
    return(sampledValue);
}

function pickReplacementPattern(ref weightedPatterns:map<string, double>): string {
    def ref weightRangePatterns:map<double, string> = weightMapToRangeMap(weightedPatterns);
    def var replacementPattern:string = sampleFromRangeMap(weightRangePatterns);
    return (replacementPattern);
}

procedure generateANDPattern(var edgeAmount:int, x:Node, y:Node) {
    (def a:AndGate) = add(AndGate);
    (def a1:AndGate) = add(AndGate);
    a.Type = "open"; 
    a1.Type = "close";
    add(ForwardEdge, x, a);
    add(ForwardEdge, a1, y);
    for(i:int in [1:edgeAmount]) {
        add(ForwardEdge, a, a1);
    }
    return();
}

procedure generateORPattern(var edgeAmount:int, x:Node, y:Node) {
    (def a:OrGate) = add(OrGate);
    (def a1:OrGate) = add(OrGate);
    a.Type = "open"; 
    a1.Type = "close";
    add(ForwardEdge, x, a);
    add(ForwardEdge, a1, y);
    for(i:int in [1:edgeAmount]) {
        add(ForwardEdge, a, a1);
    }
    return();
}

procedure generateXORPattern(var edgeAmount:int, x:Node, y:Node) {
    (def a:XorGate) = add(XorGate);
    (def a1:XorGate) = add(XorGate);
    a.Type = "open"; 
    a1.Type = "close";
    add(ForwardEdge, x, a);
    add(ForwardEdge, a1, y);
    for(i:int in [1:edgeAmount]) {
        add(ForwardEdge, a, a1);
    }
    return();
}

procedure generateLoopPattern(x:Node, y:Node) {
    (def a:OrGate) = add(OrGate);
    (def a1:XorGate) = add(XorGate);
    a.Type = "open"; 
    a1.Type = "close";
    add(ForwardEdge, x, a);
    add(ForwardEdge, a, a1);
    add(BackwardEdge, a1, a);
    add(ForwardEdge, a1, y);
    return();
}

rule insertGatePattern {
    x:Node -s:ForwardEdge-> y:Node;

    modify {
    ---
        eval {
            def ref weightedPatterns:map<string, double> = map<string, double>{
                "AND"->0.3,
                "OR"->0.3,
                "XOR"->0.2,
                "LOOP"->0.2
            };
            def var replacementPattern:string = pickReplacementPattern(weightedPatterns);
            def var edgeAmount:int = randomIntInRange(2,4);
            switch(replacementPattern) {
                case "AND" {
                    generateANDPattern(edgeAmount, x, y);
                }
                case "OR" {
                    generateORPattern(edgeAmount, x, y);
                }
                case "XOR" {
                    generateXORPattern(edgeAmount, x, y);
                }
                case "LOOP" {
                    generateLoopPattern(x, y);
                }
                else {
                    emit("SHOULD NOT BE HAPPENING", replacementPattern, "\n");
                }
            }
            rem(s);
        }
    }
}

rule populateAndGates {
    x:AndGate -fe:ForwardEdge-> y:AndGate;
    if { x.Type == "open"; y.Type == "close"; }

    replace {
        x -:ForwardEdge-> f:Function;
        f -:ForwardEdge-> y;
    }
}

rule populateOpenXOrGates {
    x:Node -fe:ForwardEdge-> y:Gate;
    if {y.Type == "open"; typeof(y) == OrGate || typeof(y) == XorGate;}

    replace {
        x -:ForwardEdge-> f:Function;
        f -:ForwardEdge-> y;
    }
}


rule populateXOrGates {
    y:Gate -fe1:ForwardEdge-> z:Node;
    if { y.Type == "open"; typeof(y) == OrGate || typeof(y) == XorGate;}

    replace {
        y -:ForwardEdge-> :Event -:ForwardEdge-> z;
    }
}

rule populateLoop {
    x:Gate -fe:ForwardEdge-> y:XorGate -be:BackwardEdge-> z:OrGate;
    replace {
        x -:ForwardEdge-> :Function -:ForwardEdge-> :Event -:ForwardEdge-> y;
        y -:BackwardEdge-> :Event -:BackwardEdge-> z;
    }
}

rule populateLoop1 {
    y:XorGate -be:BackwardEdge-> z:OrGate;
    replace {
        y -:BackwardEdge-> :Event -:BackwardEdge-> z;
    }
}

rule populateLoop2 {
    x:XorGate -fe1:ForwardEdge-> g:Gate;
    if {x.Type == "close";}
    replace {
        x -:ForwardEdge-> :Event -:ForwardEdge-> :Function -:ForwardEdge-> :Event -:ForwardEdge-> g;
    }
}

rule alternateEventsAndFunctions {
    alternative {
        EventGateEvent {
            e:Event -fe:ForwardEdge-> g:Gate -fe1:ForwardEdge-> e1:Event;

            modify {
                g -:ForwardEdge-> :Function -:ForwardEdge-> e1;
                delete(fe1);
            }
        }

        FunctionGateFunction {
            f:Function -fe:ForwardEdge-> g:Gate -fe1:ForwardEdge-> f1:Function;

            modify {
                g -:ForwardEdge-> :Event -:ForwardEdge-> f1;
                delete(fe1);
            }
        }
    }
}

rule alternateEventsAndFunctions1 {
    x:Node -fe:ForwardEdge-> g:Gate -fe1:ForwardEdge-> g1:Gate -:ForwardEdge-> y:Node;
    alternative {
        EventGateGate {
            if {typeof(x) == Event; typeof(y) == Event;}

            modify {
                g -:ForwardEdge-> :Function -:ForwardEdge-> g1;
                delete(fe1);
            }
        }

        FunctionGateGate {
            if {typeof(x) == Function; typeof(y) == Function;}

            modify {
                g -:ForwardEdge-> :Event -:ForwardEdge-> g1;
                delete(fe1);
            }
        }

        MixedGateGate1 {
            if {typeof(x) == Function; typeof(y) == Event;}

            modify {
                g -:ForwardEdge-> :Event -:ForwardEdge-> :Function -:ForwardEdge-> g1;
                delete(fe1);
            }
        }

        MixedGateGate2 {
            if {typeof(x) == Event; typeof(y) == Function;}

            modify {
                g -:ForwardEdge-> :Function -:ForwardEdge-> :Event -:ForwardEdge-> g1;
                delete(fe1);
            }
        }
    }
}


