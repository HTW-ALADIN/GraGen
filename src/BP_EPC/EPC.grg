#using "BP.gm"
#using "EPC.gm"

rule loadGraph {
    replace {
        ---
        eval {
            insert(File::import("../BP_Metamodel/test.grs"));
        }
    }
}

// ###########################################################################
// Leaf Pattern
// ###########################################################################
rule insertLeaf {
    // must have parent node
    parrentPattern:Pattern -e:PatternConnector-> currentPattern:Pattern;
    // can't have any child nodes
    negative {
        currentPattern --> .;
    }

    modify {
    ---
        eval {
            generatePattern(currentPattern, parrentPattern);

            rem(currentPattern);
        }
    }    
}

// ###########################################################################
// Node Pattern
// ###########################################################################
rule insertNode {
    // must have a parrent Node and at least one EPC-element as a child node
    parentPattern:Pattern -pc:PatternConnector-> currentPattern:Pattern -e:ForwardEdge-> x:Node;
    // can't have "Pattern" as a child node
    negative {
        currentPattern -:PatternConnector-> .;
    }
    if(currentPattern.type == "OR");

    modify {
    ---
        eval {
            enclosePattern(currentPattern, parentPattern);

            rem(currentPattern);
        }
    }    
}

procedure enclosePattern(currentPattern:Pattern, parentPattern:Pattern) {
    def var patternType:string = currentPattern.type;

    switch(patternType) {
        case "AND" {
            
            //generateANDPattern(currentPattern, parentPattern);
        }
        case "OR" {
            generateEnclosedORPattern(currentPattern, parentPattern);
        }
        case "XOR" {
            
            //generateXORPattern(currentPattern, parentPattern);
        }
        case "LOOP" {
            generateLoopPattern(currentPattern, parentPattern);
        }
        else {
            emit("SHOULD NOT BE HAPPENING", patternType, "\n");
        }
    }

    return();
}

// ###########################################################################
// Enclose OR Pattern
// ###########################################################################
procedure generateEnclosedORPattern(currentPattern:Pattern, parentPattern:Pattern) {
    (def openingGate:OrGate) = add(OrGate);
    (def closingGate:OrGate) = add(OrGate);
    (def func:Function) = add(Function);

    def var parentPatternId:string = nameof(parentPattern);
    def var patternId:string = nameof(currentPattern);

    openingGate.type = "open"; 
    openingGate.id = patternId;
    closingGate.type = "close";
    closingGate.id = patternId;
    func.id = patternId;

    (def -fe:ForwardEdge->) = add(ForwardEdge, func, openingGate);

    for(startNode:idNode in adjacentOutgoing(currentPattern)) {
        encloseOR(startNode, openingGate, closingGate);
    }

    (def -fe1:ForwardEdge->) = add(ForwardEdge, parentPattern, func);

    return();
}

procedure encloseOR(startNode:idNode, openingGate:Gate, closingGate:Gate) {
    def endNode:Gate;
    for(n:Gate in nodes(Gate)) {
        if(startNode.id == n.id) {
            endNode = n;
        }
    }

    def var endNodePredecessor:string = "Event";
    //typeof(adjacentIncoming(endNode)[0]);


    if (typeof(startNode) == Function) {
        (def startElement:Event) = add(Event);
        (def -fe1:ForwardEdge->) = add(ForwardEdge, openingGate, startElement);
        (def -fe2:ForwardEdge->) = add(ForwardEdge, startElement, startNode);
    }
    else {
        (def startElement:Function) = add(Function);
        (def -fe1:ForwardEdge->) = add(ForwardEdge, openingGate, startElement);
        (def -fe2:ForwardEdge->) = add(ForwardEdge, startElement, startNode);
    }


    if (endNodePredecessor == "Event") {
        (def endElement:Function) = add(Function);
        (def -fe3:ForwardEdge->) = add(ForwardEdge, endNode, endElement);
        (def -fe4:ForwardEdge->) = add(ForwardEdge, endElement, closingGate);
    } else {
        (def endElement:Event) = add(Event);
        (def -fe3:ForwardEdge->) = add(ForwardEdge, endNode, endElement);
        (def -fe4:ForwardEdge->) = add(ForwardEdge, endElement, closingGate);
    }

    return();
}



// ###########################################################################
// Root Pattern
// ###########################################################################



// ###########################################################################
// Generate Patterns
// ###########################################################################
procedure generatePattern(currentPattern:Pattern, parrentPattern:Pattern) {
    def var patternType:string = currentPattern.type;
    def var edgeAmount:int = randomIntInRange(2,4);

    switch(patternType) {
        case "AND" {
            generateANDPattern(edgeAmount, currentPattern, parrentPattern);
        }
        case "OR" {
            generateORPattern(edgeAmount, currentPattern, parrentPattern);
        }
        case "XOR" {
            generateXORPattern(edgeAmount, currentPattern, parrentPattern);
        }
        case "LOOP" {
            generateLoopPattern(currentPattern, parrentPattern);
        }
        else {
            emit("SHOULD NOT BE HAPPENING", patternType, "\n");
        }
    }

    return();
}

// ###########################################################################
// Loop Pattern
// ###########################################################################
procedure generateLoopPattern(currentPattern:Pattern, parentPattern:Pattern) {
    (def openingGate:OrGate) = add(OrGate);
    (def closingGate:XorGate) = add(XorGate);
    (def func:Function) = add(Function);

    def var parentPatternId:string = nameof(parentPattern);
    def var patternId:string = nameof(currentPattern);

    openingGate.type = "close"; 
    openingGate.id = patternId;
    closingGate.type = "open";
    closingGate.id = patternId;
    func.id = patternId;

    (def -fe:ForwardEdge->) = add(ForwardEdge, func, openingGate);

    populateForwardLoop(openingGate, closingGate);
    populateBackwardLoop(openingGate, closingGate);

    (def -fe1:ForwardEdge->) = add(ForwardEdge, parentPattern, func);

    return();
}

procedure populateForwardLoop(openingGate:Gate, closingGate:Gate) {
    (def e:Event) = add(Event);
    (def f:Function) = add(Function);
    (def -fe:ForwardEdge->) = add(ForwardEdge, openingGate, e);
    (def -fe1:ForwardEdge->) = add(ForwardEdge, e, f);
    (def -fe2:ForwardEdge->) = add(ForwardEdge, f, closingGate);
    return();
}

procedure populateBackwardLoop(openingGate:Gate, closingGate:Gate) {
    (def e:Event) = add(Event);
    (def f:Function) = add(Function);
    (def -be:BackwardEdge->) = add(BackwardEdge, closingGate, e);
    (def -be1:BackwardEdge->) = add(BackwardEdge, e, f);
    (def -be2:BackwardEdge->) = add(BackwardEdge, f, openingGate);
    return();
}


// ###########################################################################
// AND Pattern
// ###########################################################################
procedure generateANDPattern(var edgeAmount:int, currentPattern:Pattern, parentPattern:Pattern) {
    (def openingGate:AndGate) = add(AndGate);
    (def closingGate:AndGate) = add(AndGate);

    def var parentPatternId:string = nameof(parentPattern);
    def var patternId:string = nameof(currentPattern);

    openingGate.type = "open"; 
    openingGate.id = patternId;
    closingGate.type = "close";
    closingGate.id = patternId;

    (def -fe1:ForwardEdge->) = add(ForwardEdge, parentPattern, openingGate);

    for(i:int in [1:edgeAmount]) {
        populateAND(openingGate, closingGate);
    }

    return();
}

procedure populateAND(openingGate:Gate, closingGate:Gate) {
    (def e:Event) = add(Event);
    (def f:Function) = add(Function);
    (def -fe:ForwardEdge->) = add(ForwardEdge, openingGate, e);
    (def -fe1:ForwardEdge->) = add(ForwardEdge, e, f);
    (def -fe2:ForwardEdge->) = add(ForwardEdge, f, closingGate);
    return();
}

// ###########################################################################
// OR Pattern
// ###########################################################################
procedure generateORPattern(var edgeAmount:int, currentPattern:Pattern, parentPattern:Pattern) {
    (def openingGate:OrGate) = add(OrGate);
    (def closingGate:OrGate) = add(OrGate);
    (def func:Function) = add(Function);

    def var parentPatternId:string = nameof(parentPattern);
    def var patternId:string = nameof(currentPattern);

    openingGate.type = "open"; 
    openingGate.id = patternId;
    closingGate.type = "close";
    closingGate.id = patternId;
    func.id = patternId;

    (def -fe:ForwardEdge->) = add(ForwardEdge, func, openingGate);

    for(i:int in [1:edgeAmount]) {
        populateOR(openingGate, closingGate);
    }

    (def -fe1:ForwardEdge->) = add(ForwardEdge, parentPattern, func);

    return();
}

procedure populateOR(openingGate:Gate, closingGate:Gate) {
    (def e:Event) = add(Event);
    (def f:Function) = add(Function);
    (def -fe:ForwardEdge->) = add(ForwardEdge, openingGate, e);
    (def -fe1:ForwardEdge->) = add(ForwardEdge, e, f);
    (def -fe2:ForwardEdge->) = add(ForwardEdge, f, closingGate);
    return();
}

// ###########################################################################
// XOR Pattern
// ###########################################################################
procedure generateXORPattern(var edgeAmount:int, currentPattern:Pattern, parentPattern:Pattern) {
    (def openingGate:XorGate) = add(XorGate);
    (def closingGate:XorGate) = add(XorGate);
    (def func:Function) = add(Function);

    def var parentPatternId:string = nameof(parentPattern);
    def var patternId:string = nameof(currentPattern);

    openingGate.type = "open"; 
    openingGate.id = patternId;
    closingGate.type = "close";
    closingGate.id = patternId;
    func.id = patternId;

    (def -fe:ForwardEdge->) = add(ForwardEdge, func, openingGate);

    for(i:int in [1:edgeAmount]) {
        populateXOR(openingGate, closingGate);
    }

    (def -fe1:ForwardEdge->) = add(ForwardEdge, parentPattern, func);

    return();
}

procedure populateXOR(openingGate:Gate, closingGate:Gate) {
    (def e:Event) = add(Event);
    (def f:Function) = add(Function);
    (def -fe:ForwardEdge->) = add(ForwardEdge, openingGate, e);
    (def -fe1:ForwardEdge->) = add(ForwardEdge, e, f);
    (def -fe2:ForwardEdge->) = add(ForwardEdge, f, closingGate);
    return();
}





// ###########################################################################
// Utility Functions
// ###########################################################################
function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}