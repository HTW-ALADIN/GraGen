#using "EPC.gm"
#using "BP.gm"

pattern isLeaf(x:Pattern) {
    negative {
        x --> .;
    }
}

pattern isRoot(x:Pattern) {
    negative {
        . --> x;
    }
}

rule insertLeaf() {
    y:Pattern -e:PatternConnector-> x:Pattern;
    :isLeaf(x);

    
}

rule insertNode() {
    y:Pattern -e:PatternConnector-> x:Pattern --> z:Node;
    if (!typeof(z) == Pattern)


}

rule insertRoot() {
    x:Pattern;
    :isRoot(x);
}


pattern insertPattern(x:Pattern) modify(x:Pattern) {

}

rule detectPatternLocation {
    x:Pattern;
    :isPatternLeaf(x);

    alternative {
        hasParent {
            y:Pattern -pc:PatternConnector-> x;

            alternative {
                isLeaf {
                    negative {
                        x --> .;
                    }


                }
            }


            ---
            def var patternType:string;
            def var patternId:string;

            def var hasParent:bool;
            yield {
                yield patternType = x.type;
                yield patternId = nameof(x);
                yield patternId = true;
            }
        }

        isRoot {}
    }

---
    modify {
    ---
        eval {
            emit(patternId);

            def var edgeAmount:int = randomIntInRange(2,4);

            switch(patternType) {
                case "AND" {
                    generateANDPattern(edgeAmount, x);
                }
                else {
                    emit("SHOULD NOT BE HAPPENING", patternType, "\n");
                }
            }
        }
    }
}

procedure generateANDPattern(var edgeAmount:int, x:Pattern) {
    (def a:AndGate) = add(AndGate);
    (def a1:AndGate) = add(AndGate);
    a.type = "open"; 
    a1.type = "close";
    add(ForwardEdge, x, a);
    for(i:int in [1:edgeAmount]) {
        add(ForwardEdge, a, a1);
    }
    return();
}

function randomIntInRange(var lowerBound: int, var upperBound: int) : int {
    return((randomInteger() % (upperBound - lowerBound + 1)) + lowerBound);
}

function randomInteger() : int {
    return((int)Math::round(random() * 10000));
}